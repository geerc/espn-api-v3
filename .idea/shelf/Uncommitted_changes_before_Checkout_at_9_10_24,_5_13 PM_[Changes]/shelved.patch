Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'''\nTODO:\n1. Give LLM more/better information\n    1. Give/instruct to browse for news articles?\n'''\n\nimport playerID\nfrom authorize import Authorize\nfrom team import Team\nfrom player import Player\nfrom utils.building_utils import getUrl\nfrom itertools import chain\n\nimport pandas as pd\nimport numpy as np\nimport requests\nimport math\nfrom tabulate import tabulate as table\nimport os\nimport sys\nimport argparse\nimport progressbar\nfrom espn_api.football import League\nfrom datetime import datetime\nimport re\nimport json\nimport openai\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain_openai import ChatOpenAI\nfrom utils.printing_utils import printPowerRankings\nimport os\nfrom dotenv import load_dotenv\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"week\", help='Get week of the NFL season to run rankings for')\nargs = parser.parse_args()\nweek = int(args.week)\n\n# Define dates/year\nyear = datetime.now().year\nmonth =  datetime.now().month\nday = datetime.now().day\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Get login credentials for leagues\nleague_id = os.getenv('league_id')\nswid = os.getenv('swid')\nespn_s2 = os.getenv('espn_s2')\napi_key= os.getenv('OPEN_API_KEY')\n\nleague = League(league_id, year, espn_s2, swid)\nprint(league, \"\\n\")\n\ndef gen_power_rankings():\n    power_rankings = league.power_rankings(week=week)\n\n    # Extract team names\n    extracted_team_names = [(record, re.sub(r'Team\\((.*?)\\)', r'\\1', str(team))) #convert team object to string\n        for record, team in power_rankings]\n\n    # Convert to Dataframe\n    power_rankings = pd.DataFrame(extracted_team_names, columns=['Power Score','Team'])\n\n\n    # Switch Score and Team Name cols\n    power_rankings = power_rankings.reindex(columns=['Team', 'Power Score'])\n\n    return power_rankings\n\ndef gen_ai_summary():\n    # Retrieve all matchups for the given week\n    matchups = league.box_scores(week=week)\n\n    # Extract box score data\n    box_scores_data = []\n\n    for matchup in matchups:\n        matchup_data = {\n            \"home_team\": matchup.home_team.team_name,\n            \"home_score\": matchup.home_score,\n            \"home_projected\": matchup.home_projected,\n            \"away_team\": matchup.away_team.team_name,\n            \"away_score\": matchup.away_score,\n            \"away_projected\": matchup.away_projected,\n            \"home_players\": [\n                {\n                    \"player_name\": player.name,\n                    \"slot_position\": player.slot_position,\n                    \"position\": player.position,\n                    \"points\": player.points,\n                    \"projected_points\": player.projected_points\n                } for player in matchup.home_lineup\n            ],\n            \"away_players\": [\n                {\n                    \"player_name\": player.name,\n                    \"position\": player.position,\n                    \"slot_position\": player.slot_position,\n                    \"points\": player.points,\n                    \"projected_points\": player.projected_points\n                } for player in matchup.away_lineup\n            ]\n        }\n        box_scores_data.append(matchup_data)\n\n    # Convert to JSON format\n    box_scores_json = json.dumps(box_scores_data, indent=4)\n\n    # Setting up OpenAI model\n    llm = ChatOpenAI(model_name=\"gpt-4o-mini\", temperature=0, openai_api_key=api_key)\n\n    # Define the prompt template for generating a newspaper-like summary\n    prompt_template = PromptTemplate(\n        input_variables=[\"box_scores_json\", \"week\"],\n        template=\"\"\"\n        Write a newspaper-style summary of the fantasy football matchups based on the following JSON data:\n\n        {json_data}\n        \n        You should also extensively search the internet for 'NFL Week {week} Storylines'.\n\n        The summary should include:\n        - The names of the teams\n        - The projected scores for each team\n        - Key players and their projected points\n        - Any notable points or highlights\n\n        Write in a formal, engaging newspaper tone.\n        \"\"\"\n    )\n\n    # Initialize the LLMChain with the Llama model and prompt template\n    llm_chain = LLMChain(\n        llm=llm,\n        prompt=prompt_template\n    )\n\n    # Sample JSON data (replace with your actual JSON data)\n    json_data = box_scores_json\n\n    # Generate the newspaper-like summary\n    result = llm_chain.invoke(input={\"box_score_json\": box_scores_json, \"week\": week})\n\n    # return the result\n    return result\n\n# Generate Power Rankings\nrankings = gen_power_rankings()\n\n# Generate Expected Standings\n\n# Generate Playoff Probability (if week 5 or later) and append to expected standings\n\n# Generate Luck Index\n\n# Generate AI Summary\nsummary = gen_ai_summary()\n\n# Print everything\n# open text file\nfilepath = f\"/Users/christiangeer/Fantasy_Sports/football/power_rankings/jtown-dynasty/content/blog/Week{week}{year}PowerRankings.md\"\nsys.stdout = open(filepath, \"w\")\n\n# for the markdown files in blog\nprint(\"---\")\nprint(\"title: Week\", str(week), year, \"Report\")\nprint(\"date: \",datetime.now().date())\nprint(f\"image: /images/{year}week{week}.jpeg\")\nprint(\"draft: true\")\nprint(\"---\")\n\nprint(\"<!-- excerpt -->\")\n\nprint(\"\\n# POWER RANKINGS\\n\")\n# Value un-informed\nprint(table(rankings, headers='keys', tablefmt='pipe', numalign='center')) # have to manually center all play % because its not a number\n\n# print(table(Value_Power_Rankings_print, headers='keys',tablefmt='pipe', numalign='center')) # have to manually center all play % and weekly change because not an int\n\nprint('\\n##Summary:\\n')\nprint(summary)\n# print(\"\\n# EXPECTED STANDINGS (as of week \", week, \")\")\n# league.printExpectedStandings(week)\n# print(table(projectedStandings_prnt, headers='keys', tablefmt='pipe', numalign='center'))\n\n# if week >= 5:\n#     print(\"\\n# PLAYOFF PROBABILITIES (as of week \", week, \")\")\n#     print(table(projections, headers='keys', tablefmt='pipe', numalign='center'))\n\n\n# print(\"\\n# LUCK INDEX\")\n# league.printLuckIndex(week)\n\n# print(\"\\n WEEK \", week, \" ALL PLAY STANDINGS (SORT BY WINS)\")\n# print(table(allplay, headers='keys', tablefmt='github', numalign='decimal'))\n\n# print(\"\\n WEEK \", week, \" POWER SCORE (CALC W/ LEAGUE AVERAGE SCORE)\")\n# print(table(team_scores_prt, headers='keys', tablefmt='github', numalign='decimal'))\n\n# close text file\nsys.stdout.close()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 823c12ea9b2ff73fc1b04c404162ce75fc9be2a9)
+++ b/main.py	(date 1726002649021)
@@ -109,7 +109,7 @@
     box_scores_json = json.dumps(box_scores_data, indent=4)
 
     # Setting up OpenAI model
-    llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0, openai_api_key=api_key)
+    llm = ChatOpenAI(model_name="gpt-4o", temperature=0, openai_api_key=api_key)
 
     # Define the prompt template for generating a newspaper-like summary
     prompt_template = PromptTemplate(
@@ -119,13 +119,13 @@
 
         {json_data}
         
-        You should also extensively search the internet for 'NFL Week {week} Storylines'.
-
         The summary should include:
         - The names of the teams
         - The projected scores for each team
         - Key players and their projected points
         - Any notable points or highlights
+        
+        You should also extensively search the internet for 'NFL Week {week} Storylines'. If a player is noteworthy, include that information with his projected points.
 
         Write in a formal, engaging newspaper tone.
         """
